#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 32

#define OLED_RESET -1
#define SCREEN_ADDRESS 0x3C
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// Updated Rock - 32x24, asteroid-like with jagged edges and craters
const uint8_t PROGMEM rock_bitmap[] = {
  0b00000000, 0b00011111, 0b11000000, 0b00000000,  // Jagged top
  0b00000000, 0b01111111, 0b11110000, 0b00000000,
  0b00000001, 0b11111111, 0b11111000, 0b00000000,
  0b00000011, 0b11111111, 0b11111100, 0b00000000,
  0b00000111, 0b11111011, 0b11111110, 0b00000000,  // Crater on left
  0b00001111, 0b11110001, 0b11111111, 0b00000000,
  0b00011111, 0b11100000, 0b11111111, 0b10000000,
  0b00111111, 0b11000000, 0b01111111, 0b11000000,
  0b01111111, 0b10000000, 0b00111111, 0b11100000,
  0b01111111, 0b10000000, 0b00011111, 0b11100000,  // Uneven middle
  0b11111111, 0b00000000, 0b00001111, 0b11110000,
  0b11111110, 0b00000000, 0b00000111, 0b11110000,
  0b11111110, 0b00000000, 0b00000011, 0b11111000,
  0b11111100, 0b00000000, 0b00000001, 0b11111000,
  0b11111100, 0b00000000, 0b00000000, 0b11111100,
  0b11111000, 0b00000000, 0b00000000, 0b11111100,
  0b11111000, 0b00000000, 0b00000000, 0b01111110,
  0b11111000, 0b00000000, 0b00000000, 0b01111110,  // Crater on right
  0b11111100, 0b00000000, 0b00000000, 0b11111110,
  0b01111100, 0b00000000, 0b00000001, 0b11111100,
  0b01111110, 0b00000000, 0b00000011, 0b11111000,
  0b00111111, 0b00000000, 0b00001111, 0b11110000,
  0b00011111, 0b11100000, 0b01111111, 0b11100000,
  0b00001111, 0b11111111, 0b11111111, 0b10000000   // Jagged bottom
};

// Paper - 32x16 (unchanged)
const uint8_t PROGMEM paper_bitmap[] = {
  0b00000000, 0b00000000, 0b00000000, 0b00000000,
  0b11111111, 0b11111111, 0b11111111, 0b11000000,
  0b11111111, 0b11111111, 0b11111111, 0b11000000,
  0b11111111, 0b11111111, 0b11111111, 0b11000000,
  0b11111111, 0b11111111, 0b11111111, 0b10000000,
  0b11111111, 0b11111111, 0b11111111, 0b00000000,
  0b11111111, 0b11111111, 0b11111110, 0b00000000,
  0b11111111, 0b11111111, 0b11111100, 0b00000000,
  0b11111111, 0b11111111, 0b11111000, 0b00000000,
  0b11111111, 0b11111111, 0b11110000, 0b00000000,
  0b11111111, 0b11111111, 0b11100000, 0b00000000,
  0b11111111, 0b11111111, 0b11000000, 0b00000000,
  0b11111111, 0b11111111, 0b10000000, 0b00000000,
  0b11111111, 0b11111111, 0b00000000, 0b00000000,
  0b11111111, 0b11111110, 0b00000000, 0b00000000,
  0b11111111, 0b11111100, 0b00000000, 0b00000000
};

// Scissors - 32x24 (unchanged from your latest version)
const uint8_t PROGMEM scissors_bitmap[] = {
  0b00000000, 0b00000000, 0b00000000, 0b00000000,
  0b01100000, 0b00000000, 0b00000000, 0b01100000,
  0b01110000, 0b00000000, 0b00000000, 0b11100000,
  0b00111000, 0b00000000, 0b00000001, 0b11000000,
  0b00011100, 0b00000000, 0b00000011, 0b10000000,
  0b00001110, 0b00000000, 0b00000111, 0b00000000,
  0b00000111, 0b00000000, 0b00001110, 0b00000000,
  0b00000011, 0b10000000, 0b00011100, 0b00000000,
  0b00000001, 0b11000000, 0b00111000, 0b00000000,
  0b00000000, 0b11100000, 0b01110000, 0b00000000,
  0b00000000, 0b01110000, 0b11100000, 0b00000000,
  0b00000000, 0b00111000, 0b11000000, 0b00000000,
  0b00000000, 0b00111100, 0b10000000, 0b00000000,
  0b00000000, 0b00111111, 0b00000000, 0b00000000,
  0b00000000, 0b01111111, 0b11001111, 0b00000000,
  0b00000000, 0b01110000, 0b11000111, 0b00000000,
  0b00000000, 0b01110000, 0b11000111, 0b00000000,
  0b00000000, 0b01110000, 0b11000111, 0b00000000,
  0b00000000, 0b01110000, 0b11000111, 0b00000000,
  0b00000000, 0b01110000, 0b11000111, 0b00000000,
  0b00000000, 0b01110000, 0b11000111, 0b00000000,
  0b00000000, 0b01111111, 0b11001111, 0b00000000,
  0b00000000, 0b01111111, 0b11001111, 0b00000000,
  0b00000000, 0b01111111, 0b11001111, 0b00000000
};

void setup() {
  Serial.begin(9600);
  if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println(F("SSD1306 allocation failed"));
    for (;;);
  }
  display.clearDisplay();
}

void displayOption(const char* text, const uint8_t* bitmap, int height) {
  display.clearDisplay();

  // Text on the left
  display.setTextSize(2);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 12); // Left-aligned, vertically centered
  display.println(text);

  // Bitmap on the right
  display.drawBitmap(96, 4, bitmap, 32, height, SSD1306_WHITE); // Right side
  display.display();
}

void loop() {
  displayOption("Rock", rock_bitmap, 24); // Updated height to 24
  delay(2000);
  displayOption("Paper", paper_bitmap, 16);
  delay(2000);
  displayOption("Scissors", scissors_bitmap, 24);
  delay(2000);
}